{"version":3,"sources":["package/loginbutton.js","install_metamask.js","package/providerstatus.js","package/index.js","Demo.js","index.js"],"names":["address","ethUtil","require","web3","window","msg","bufferToHex","Buffer","LoginButton","_Component","props","_this","Object","C_Users_paulg_Documents_polats_react_web3_auth_client_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_0__","this","C_Users_paulg_Documents_polats_react_web3_auth_client_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_2__","C_Users_paulg_Documents_polats_react_web3_auth_client_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_3__","call","handleSignature","bind","C_Users_paulg_Documents_polats_react_web3_auth_client_node_modules_babel_runtime_helpers_esm_assertThisInitialized__WEBPACK_IMPORTED_MODULE_4__","web3Login","web3Wrapper","selectedAccount","C_Users_paulg_Documents_polats_react_web3_auth_client_node_modules_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_5__","C_Users_paulg_Documents_polats_react_web3_auth_client_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_1__","key","value","err","signed","fetchOpts","method","headers","Content-Type","body","JSON","stringify","fetch","then","res","status","json","Error","statusText","console","log","catch","eth","accounts","personal","sign","react__WEBPACK_IMPORTED_MODULE_6__","onClick","Component","InstallMetamask","_React$Component","classCallCheck","possibleConstructorReturn","getPrototypeOf","apply","arguments","inherits","createClass","react","href","target","rel","title","src","width","alt","React","Network","networkIdToNetwork","1","3","4","42","50","ProviderStatus","state","networkId","undefined","fetchNetworkDetailsAsync","_fetchNetworkDetailsAsync","asyncToGenerator","regenerator_default","a","mark","_callee","wrap","_context","prev","next","getNetworkIdAsync","sent","setState","stop","networkName","bloomer_min","isColor","networkRender","renderNetworkIndicator","style","zIndex","networkToRPCURI","Demo","contractWrappers","react_default","createElement","paddingLeft","paddingRight","paddingBottom","providerstatus_ProviderStatus","loginbutton","install_metamask_InstallMetamask","ComponentWithReactWeb3Auth","initializeWeb3Async","injectedProviderIfExists","ethereum","_","enable","t0","injectedWeb3IfExists","currentProvider","Web3Wrapper","signerProvider","isMetaMask","isToshi","MetamaskSubprovider","SignerSubprovider","provider","Web3ProviderEngine","addProvider","RPCSubprovider","start","ContractWrappers","exchange","abi","erc20Token","etherToken","forwarder","abiDecoder","addABI","constructor","name","ReactDOM","render","src_Demo","document","getElementById"],"mappings":"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","file":"static/js/main.c15b3a79.chunk.js","sourcesContent":["import { Component } from 'react';\nimport * as React from 'react';\n\nconst ethUtil = require('ethereumjs-util');\nconst web3 = window.web3;\n\n// The contents of the message can be anything\nconst rawMessage = 'Some message';\nconst msg = ethUtil.bufferToHex(new Buffer(rawMessage, 'utf8'));\nvar address;\n\nexport class LoginButton extends Component {\n\n    constructor(props) {\n      super(props);\n\n      this.handleSignature = this.handleSignature.bind(this);\n      this.web3Login = this.web3Login.bind(this);\n\n      if (props.web3Wrapper)\n        address = props.web3Wrapper.selectedAccount;\n    }\n\n    handleSignature(err, signed) {\n      if (!err) {\n\n        const fetchOpts = {\n          method: 'POST',\n          headers: { 'Content-Type': 'application/json' },\n          body: JSON.stringify({ address, msg, signed })\n        };\n\n        fetch('/login', fetchOpts).then(res => {\n          if (res.status >= 200 && res.status <= 300) {\n            return res.json();\n          } else {\n            throw Error(res.statusText);\n          }\n        }).then(json => {\n          console.log(\"login success: \", json);\n          // Auth succeeded\n        }).catch(err => {\n          console.log(\"login failed: \", err);\n          // Auth failed\n        })\n      }\n    };\n\n    web3Login() {\n      address = web3.eth.accounts[0];\n\n      web3.personal.sign(msg, address, this.handleSignature);\n    }\n\n    render() {\n      return (\n      <div>\n          <button onClick={this.web3Login}>Login via Web3</button>\n      </div>\n      );\n    }\n}\n","import * as React from 'react';\n\nexport class InstallMetamask extends React.Component {\n    render(): React.ReactNode {\n        return (\n            <div>\n                <h1> Please install Metamask </h1>\n                <a\n                    href=\"https://metamask.io/\"\n                    target=\"_blank\"\n                    rel=\"noopener noreferrer\"\n                    title=\"Metamask is required. Click to download.\"\n                >\n                    <img\n                        src=\"https://github.com/MetaMask/faq/raw/master/images/download-metamask-dark.png\"\n                        width=\"200px\"\n                        alt=\"Download Metamask\"\n                    />\n                </a>\n                <p> Once metamask is installed, please refresh this page </p>\n            </div>\n        );\n    }\n}\n","import { Navbar, NavbarBrand, NavbarItem, Tag } from 'bloomer';\nimport * as React from 'react';\n\nconst Network = {\n    Mainnet : 'Mainnet',\n    Ropsten : 'Ropsten',\n    Kovan : 'Kovan',\n    Rinkeby : 'Rinkeby',\n    Unknown : 'Unknown',\n}\nconst networkIdToNetwork = {\n    1: Network.Mainnet,\n    3: Network.Ropsten,\n    4: Network.Rinkeby,\n    42: Network.Kovan,\n    50: Network.Unknown,\n};\n\nexport class ProviderStatus extends React.Component {\n\n    state = { networkId: undefined };\n\n    constructor(props) {\n      super(props);\n      this.fetchNetworkDetailsAsync();\n    }\n\n    async fetchNetworkDetailsAsync() {\n        const { web3Wrapper } = this.props;\n        if (web3Wrapper) {\n            const networkId = await web3Wrapper.getNetworkIdAsync();\n            if (networkId !== this.state.networkId) {\n                this.setState({ networkId });\n            }\n        }\n    }\n    renderNetworkIndicator() {\n        const { networkId } = this.state;\n        if (networkId) {\n            const networkName = networkIdToNetwork[networkId] || Network.Unknown;\n            if (networkName === Network.Unknown || networkName === Network.Mainnet) {\n                return <Tag isColor=\"warning\">{networkName} - Please connect to a test network</Tag>;\n            }\n            return <Tag isColor=\"primary\">{networkName}</Tag>;\n        }\n        return <Tag isColor=\"danger\">Disconnected</Tag>;\n    }\n\n    render() {\n        const networkRender = this.renderNetworkIndicator();\n        return (\n            <Navbar style={{ zIndex: -1 }}>\n                <NavbarBrand>\n                    <NavbarItem>\n                        <strong> Network Status </strong>\n                        <NavbarItem>{networkRender}</NavbarItem>\n                    </NavbarItem>\n                </NavbarBrand>\n            </Navbar>\n        );\n    }\n\n}\n","import { Component } from 'react';\nimport { ContractWrappers, MetamaskSubprovider, RPCSubprovider, Web3ProviderEngine } from '0x.js';\nimport { Web3Wrapper } from '@0x/web3-wrapper';\nimport { SignerSubprovider } from '@0x/subproviders';\nimport * as _ from 'lodash';\n\nexport * from './providerstatus';\nexport * from './loginbutton';\n\nconst networkToRPCURI = {\n    1: 'https://mainnet.infura.io',\n    3: 'https://ropsten.infura.io',\n    4: 'https://rinkeby.infura.io',\n    42: 'https://kovan.infura.io',\n    50: 'http://localhost:8545',\n};\n\nexport default class ComponentWithReactWeb3Auth extends Component {\n\n    constructor(props) {\n      super(props);\n\n      this.initializeWeb3Async();\n    }\n\n    async initializeWeb3Async() {\n        let injectedProviderIfExists = window.ethereum;\n        if (!_.isUndefined(injectedProviderIfExists)) {\n            if (!_.isUndefined(injectedProviderIfExists.enable)) {\n                try {\n                    await injectedProviderIfExists.enable();\n                } catch (err) {\n                    console.log(err);\n                }\n            }\n        } else {\n            const injectedWeb3IfExists = window.web3;\n            if (!_.isUndefined(injectedWeb3IfExists) && !_.isUndefined(injectedWeb3IfExists.currentProvider)) {\n                injectedProviderIfExists = injectedWeb3IfExists.currentProvider;\n            } else {\n                return undefined;\n            }\n        }\n        if (injectedProviderIfExists) {\n            // Wrap Metamask in a compatibility wrapper as some of the behaviour\n            // differs\n            const networkId = await new Web3Wrapper(injectedProviderIfExists).getNetworkIdAsync();\n            const signerProvider =\n                injectedProviderIfExists.isMetaMask || injectedProviderIfExists.isToshi\n                    ? new MetamaskSubprovider(injectedProviderIfExists)\n                    : new SignerSubprovider(injectedProviderIfExists);\n            const provider = new Web3ProviderEngine();\n            provider.addProvider(signerProvider);\n            provider.addProvider(new RPCSubprovider(networkToRPCURI[networkId]));\n            provider.start();\n            const web3Wrapper = new Web3Wrapper(provider);\n            const contractWrappers = new ContractWrappers(provider, { networkId });\n            // Load all of the ABI's into the ABI decoder so logs are decoded\n            // and human readable\n            _.map(\n                [\n                    contractWrappers.exchange.abi,\n                    contractWrappers.erc20Token.abi,\n                    contractWrappers.etherToken.abi,\n                    contractWrappers.forwarder.abi,\n                ],\n                abi => web3Wrapper.abiDecoder.addABI(abi),\n            );\n            this.setState({ web3Wrapper, contractWrappers, web3: injectedProviderIfExists });\n        }\n    }\n\n    componentDidUpdate() {\n      console.log(this.state);\n    }\n\n    async componentDidMount() {\n      console.log(this.constructor.name + \" componentDidMount\");\n    }\n\n    render() {\n      return null;\n    }\n}\n","\nimport React from 'react';\nimport { InstallMetamask } from './install_metamask';\n\n// import ComponentWithReactWeb3Auth, {ProviderStatus, LoginButton} from 'react-web3-auth'; // import when using via npm install\nimport ComponentWithReactWeb3Auth, {ProviderStatus, LoginButton} from './package';\n\n\nclass Demo extends ComponentWithReactWeb3Auth {\n  constructor(props) {\n    super(props);\n\n  }\n\n  render() {\n    if (!this.state || !this.state.contractWrappers || !this.state.web3Wrapper) {\n        return (\n          <div>\n            {<InstallMetamask />}\n          </div>\n        );\n    }\n    return (\n        <div style={{ paddingLeft: 30, paddingRight: 30, paddingBottom: 30 }}>\n            <ProviderStatus web3Wrapper={this.state.web3Wrapper}/>\n            <LoginButton web3Wrapper={this.state.web3Wrapper}/>\n        </div>\n    );\n  }\n}\n\nexport default Demo;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Demo from './Demo';\nimport 'bulma/css/bulma.css';\n\nReactDOM.render(\n  <Demo\n    // sampleProp={sampleProp}\n  />, document.getElementById('root'));\n"],"sourceRoot":""}